# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'simplecov'
SimpleCov.start 'rails'
require 'rubygems'
require 'spork'
require 'cucumber/rails'
require 'cucumber/rspec/doubles'
require 'cucumber/rspec/doubles'

# Make sure this require is after you require cucumber/rails/world.
require 'email_spec' # add this line if you use spork
require 'email_spec/cucumber'

Spork.prefork do
  # Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
  # order to ease the transition to Capybara we set the default here. If you'd
  # prefer to use XPath just remove this line and adjust any selectors in your
  # steps to use the XPath syntax.
  Capybara.default_selector = :css

  Capybara.register_driver :firefox do |app|
    Capybara::Selenium::Driver.new(app, browser: :firefox)
  end

  Capybara.javascript_driver = :firefox
end

Spork.each_run do
  # By default, any exception happening in your Rails application will bubble up
  # to Cucumber so that your scenario will fail. This is a different from how
  # your application behaves in the production environment, where an error page will
  # be rendered instead.
  #
  # Sometimes we want to override this default behaviour and allow Rails to rescue
  # exceptions and display an error page (just like when the app is running in production).
  # Typical scenarios where you want to do this is when you test your error pages.
  # There are two ways to allow Rails to rescue exceptions:
  #
  # 1) Tag your scenario (or feature) with @allow-rescue
  #
  # 2) Set the value below to true. Beware that doing this globally is not
  # recommended as it will mask a lot of errors for you!
  #
  ActionController::Base.allow_rescue = false

  # Remove/comment out the lines below if your app doesn't have a database.
  # For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
  begin
    DatabaseCleaner[:mongoid].strategy = :truncation
  rescue NameError
    raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
  end

  # You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
  # See the DatabaseCleaner documentation for details. Example:
  #
  #   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
  #     # { except: [:widgets] } may not do what you expect here
  #     # as tCucumber::Rails::Database.javascript_strategy overrides
  #     # this setting.
  #     DatabaseCleaner.strategy = :truncation
  #   end
  #
  #   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
  #     DatabaseCleaner.strategy = :transaction
  #   end
  #

  # Possible values are :truncation and :transaction
  # The :transaction strategy is faster, but might give you threading problems.
  # See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
  Cucumber::Rails::Database.javascript_strategy = :truncation

  # OmniAuth
  OMNIAUTH_MOCKED_AUTHHASH = OmniAuth::AuthHash.new({
    provider: 'facebook',
    uid: '123456',
    info: {
      email: 'test@127.0.0.1',
      name: 'John Doe',
      first_name: 'John',
      last_name: 'Doe',
      image: 'http://graph.facebook.com/123456/picture?type=square',
      urls: { "Facebook" => 'http://www.facebook.com/profile.php?id=123456' } },
    credentials: {
      token: "facebook token",
      expires_at: 1361304575,
      expires: true },
    extra: {
      raw_info: {
        id: '123456',
        username: 'johndoe',
        name: 'John Doe',
        first_name: 'John',
        last_name: 'Doe',
        link: 'http://www.facebook.com/profile.php?id=123456',
        birthday: '10/03/1981',
        work: [
          { employer: { id: '100', name: 'First Inc.' }, start_date: '0000-00' },
          { employer: { id: '101', name: 'Second Ltd.' }, start_date: '0000-00' },
          { employer: { id: '102', name: 'Third S.p.A.' }, start_date: '0000-00', end_date: '0000-00' }],
        favorite_athletes: [
          { id: '200', name: 'First Athlete' },
          { id: '201', name: 'Second Athlete' }],
        education: [{ school: { id: '300', name: 'A College' }, type: 'College' }],
        gender: 'male',
        email: 'test@127.0.0.1',
        timezone: 1,
        locale: 'en_US',
        languages: [
          { id: '113153272032690', name: 'Italian' },
          { id: '106059522759137', name: 'English' },
          { id: '108224912538348', name: 'French' }],
        updated_time: '2012-12-16T08:49:27+0000' } } })
  OmniAuth.config.mock_auth[:facebook] = OMNIAUTH_MOCKED_AUTHHASH
  Before do
  end
end
